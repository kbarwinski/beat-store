// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeatStoreBackend.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220826175325_DBInit")]
    partial class DBInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("InvitationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "98597c35-4af6-4d59-b256-88a2852d8f14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2067712-9450-4be1-ae11-f47afc351fb0",
                            Email = "Author1@test.com",
                            EmailConfirmed = true,
                            InvitationCode = "A",
                            LockoutEnabled = false,
                            NormalizedEmail = "AUTHOR1@TEST.COM",
                            NormalizedUserName = "AUTHOR1",
                            PasswordHash = "AQAAAAEAACcQAAAAEJjKXZwT4WPwF65RIAcm7FPGZinKXl6FfN5Sc8BmQQlP8iN395O1LxIjY3McbFUPQg==",
                            PhoneNumber = "XXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Author1"
                        },
                        new
                        {
                            Id = "32249352-0188-44c8-824d-00a16cd5ddf2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b706495-03ff-4820-83c9-df2008dea3b1",
                            Email = "Author2@test.com",
                            EmailConfirmed = true,
                            InvitationCode = "B",
                            LockoutEnabled = false,
                            NormalizedEmail = "AUTHOR2@TEST.COM",
                            NormalizedUserName = "AUTHOR2",
                            PasswordHash = "AQAAAAEAACcQAAAAEO+pVl/0Y9nVYjgNAucRHoW6Fidi5Tpn9z5LjjrZx1v21amaxc+O/BS3gRFmbTirig==",
                            PhoneNumber = "XXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Author2"
                        },
                        new
                        {
                            Id = "259c3c36-4fa7-4ec4-8865-3ca70a4c48ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85273782-2b37-4449-b633-c091e7c2b42a",
                            Email = "Author3@test.com",
                            EmailConfirmed = true,
                            InvitationCode = "C",
                            LockoutEnabled = false,
                            NormalizedEmail = "AUTHOR3@TEST.COM",
                            NormalizedUserName = "AUTHOR3",
                            PasswordHash = "AQAAAAEAACcQAAAAELDt5cVweuupFKsXVfPZaFJOxZRNINIq2LuACWDcLTK2MDdznJL39UhxU+AKZG6qhA==",
                            PhoneNumber = "XXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Author3"
                        });
                });

            modelBuilder.Entity("Entities.Models.AudioItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("AudioItemId");

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Bpm")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ExclusivePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBought")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LeasePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AudioItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eab14bdc-edb7-47de-b886-30735ceaf9a4"),
                            AudioUrl = "https://dl.dropbox.com/s/jpdlkg1nvwu5e1v/Alan_Walker_-_The_Spectre_Olagist.co_.mp3",
                            Bpm = 173,
                            CreatedAt = new DateTime(2022, 8, 26, 17, 53, 25, 434, DateTimeKind.Utc).AddTicks(698),
                            ExclusivePrice = 100.0m,
                            ImageUrl = "https://i.imgur.com/dJedjOr.jpg",
                            IsBought = false,
                            LeasePrice = 10.99m,
                            Title = "The Spectre Olagist",
                            UserId = "98597c35-4af6-4d59-b256-88a2852d8f14"
                        },
                        new
                        {
                            Id = new Guid("bffdfce8-fcc4-4cec-b67e-cc67bcc52766"),
                            AudioUrl = "https://dl.dropbox.com/s/6kqet8538ejd2eb/Elektronomia_Sky_High.mp3",
                            Bpm = 148,
                            CreatedAt = new DateTime(2022, 8, 26, 17, 53, 25, 434, DateTimeKind.Utc).AddTicks(717),
                            ExclusivePrice = 200.0m,
                            ImageUrl = "https://i.imgur.com/cN2Z4uQ.jpg",
                            IsBought = false,
                            LeasePrice = 20.99m,
                            Title = "Sky High",
                            UserId = "98597c35-4af6-4d59-b256-88a2852d8f14"
                        },
                        new
                        {
                            Id = new Guid("8b83d6c1-d616-48cd-85d5-6ae367ae0956"),
                            AudioUrl = "https://dl.dropbox.com/s/1xotb98otbuxkcy/Monkeys%20Spinning%20Monkeys.mp3",
                            Bpm = 157,
                            CreatedAt = new DateTime(2022, 8, 26, 17, 53, 25, 434, DateTimeKind.Utc).AddTicks(720),
                            ExclusivePrice = 300.0m,
                            ImageUrl = "https://i.imgur.com/0meaWWx.jpg",
                            IsBought = false,
                            LeasePrice = 30.99m,
                            Title = "Spinning Monkeys",
                            UserId = "98597c35-4af6-4d59-b256-88a2852d8f14"
                        },
                        new
                        {
                            Id = new Guid("bb73ac07-557d-4245-9b0c-2cde2eab40b0"),
                            AudioUrl = "https://dl.dropbox.com/s/hs413cz02o5eoh3/Sneaky%20Snitch.mp3",
                            Bpm = 108,
                            CreatedAt = new DateTime(2022, 8, 26, 17, 53, 25, 434, DateTimeKind.Utc).AddTicks(735),
                            ExclusivePrice = 400.0m,
                            ImageUrl = "https://i.imgur.com/NG9Kkt9.jpg",
                            IsBought = false,
                            LeasePrice = 40.99m,
                            Title = "Sneaky Snitch",
                            UserId = "32249352-0188-44c8-824d-00a16cd5ddf2"
                        },
                        new
                        {
                            Id = new Guid("d630139b-c969-4c64-bd9a-fc08c74ac596"),
                            AudioUrl = "https://dl.dropbox.com/s/gwhdglsiskvgdlh/Wallpaper.mp3",
                            Bpm = 203,
                            CreatedAt = new DateTime(2022, 8, 26, 17, 53, 25, 434, DateTimeKind.Utc).AddTicks(738),
                            ExclusivePrice = 500.0m,
                            ImageUrl = "https://i.imgur.com/sG55NPb.jpg",
                            IsBought = false,
                            LeasePrice = 50.99m,
                            Title = "Wallpaper",
                            UserId = "32249352-0188-44c8-824d-00a16cd5ddf2"
                        },
                        new
                        {
                            Id = new Guid("1b2919b0-e130-4413-b8a2-c6ffc22cacbb"),
                            AudioUrl = "https://dl.dropbox.com/s/1f3r9ja2nbx8k3j/Alan-Walker-Faded.mp3",
                            Bpm = 148,
                            CreatedAt = new DateTime(2022, 8, 26, 17, 53, 25, 434, DateTimeKind.Utc).AddTicks(741),
                            ExclusivePrice = 200.0m,
                            ImageUrl = "https://i.imgur.com/zBO8WcX.jpg",
                            IsBought = false,
                            LeasePrice = 20.99m,
                            Title = "Faded",
                            UserId = "259c3c36-4fa7-4ec4-8865-3ca70a4c48ce"
                        });
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("OrderId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsFulfilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("Totals")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OrderItemId");

                    b.Property<Guid>("AudioItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("LicenseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AudioItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "de65816d-ffb1-43c4-b348-b886155b191f",
                            ConcurrencyStamp = "c70bc517-6869-4f89-af65-96eb27eca128",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "863bc1c5-9528-43da-adc7-b0e1eca46e03",
                            ConcurrencyStamp = "acf633f4-586b-4aab-a98e-d5df2ad4e5a3",
                            Name = "Author",
                            NormalizedName = "AUTHOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "98597c35-4af6-4d59-b256-88a2852d8f14",
                            RoleId = "de65816d-ffb1-43c4-b348-b886155b191f"
                        },
                        new
                        {
                            UserId = "32249352-0188-44c8-824d-00a16cd5ddf2",
                            RoleId = "863bc1c5-9528-43da-adc7-b0e1eca46e03"
                        },
                        new
                        {
                            UserId = "259c3c36-4fa7-4ec4-8865-3ca70a4c48ce",
                            RoleId = "863bc1c5-9528-43da-adc7-b0e1eca46e03"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.AudioItem", b =>
                {
                    b.HasOne("Entities.Models.AppUser", "AppUser")
                        .WithMany("AudioItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Entities.Models.OrderItem", b =>
                {
                    b.HasOne("Entities.Models.AudioItem", "AudioItem")
                        .WithMany()
                        .HasForeignKey("AudioItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.AppUser", b =>
                {
                    b.Navigation("AudioItems");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
